{"ast":null,"code":"import { addFitter } from '../components/trendline';\nimport { getScales } from '../utils/drawing';\nexport const pluginTrendlineLinear = {\n  id: 'chartjs-plugin-trendline',\n  afterDatasetsDraw: chartInstance => {\n    const ctx = chartInstance.ctx;\n    const {\n      xScale,\n      yScale\n    } = getScales(chartInstance);\n    const sortedDatasets = chartInstance.data.datasets.map((dataset, index) => ({\n      dataset,\n      index\n    })).filter(entry => entry.dataset.trendlineLinear).sort((a, b) => {\n      const orderA = a.dataset.order ?? 0;\n      const orderB = b.dataset.order ?? 0;\n\n      // Push 0-order datasets to the end (they draw last / on top)\n      if (orderA === 0 && orderB !== 0) return 1;\n      if (orderB === 0 && orderA !== 0) return -1;\n\n      // Otherwise, draw lower order first\n      return orderA - orderB;\n    });\n    sortedDatasets.forEach(_ref => {\n      let {\n        dataset,\n        index\n      } = _ref;\n      const showTrendline = dataset.alwaysShowTrendline || chartInstance.isDatasetVisible(index);\n      if (showTrendline && dataset.data.length > 1) {\n        const datasetMeta = chartInstance.getDatasetMeta(index);\n        addFitter(datasetMeta, ctx, dataset, xScale, yScale);\n      }\n    });\n\n    // Reset to solid line after drawing trendline\n    ctx.setLineDash([]);\n  },\n  beforeInit: chartInstance => {\n    const datasets = chartInstance.data.datasets;\n    datasets.forEach(dataset => {\n      if (dataset.trendlineLinear && dataset.trendlineLinear.label) {\n        const label = dataset.trendlineLinear.label;\n\n        // Access chartInstance to update legend labels\n        const originalGenerateLabels = chartInstance.legend.options.labels.generateLabels;\n        chartInstance.legend.options.labels.generateLabels = function (chart) {\n          const defaultLabels = originalGenerateLabels(chart);\n          const legendConfig = dataset.trendlineLinear.legend;\n\n          // Display the legend is it's populated and not set to hidden\n          if (legendConfig && legendConfig.display !== false) {\n            defaultLabels.push({\n              text: legendConfig.text || label + ' (Trendline)',\n              strokeStyle: legendConfig.color || dataset.borderColor || 'rgba(169,169,169, .6)',\n              fillStyle: legendConfig.fillStyle || 'transparent',\n              lineCap: legendConfig.lineCap || 'butt',\n              lineDash: legendConfig.lineDash || [],\n              lineWidth: legendConfig.width || 1\n            });\n          }\n          return defaultLabels;\n        };\n      }\n    });\n  }\n};","map":{"version":3,"names":["addFitter","getScales","pluginTrendlineLinear","id","afterDatasetsDraw","chartInstance","ctx","xScale","yScale","sortedDatasets","data","datasets","map","dataset","index","filter","entry","trendlineLinear","sort","a","b","orderA","order","orderB","forEach","_ref","showTrendline","alwaysShowTrendline","isDatasetVisible","length","datasetMeta","getDatasetMeta","setLineDash","beforeInit","label","originalGenerateLabels","legend","options","labels","generateLabels","chart","defaultLabels","legendConfig","display","push","text","strokeStyle","color","borderColor","fillStyle","lineCap","lineDash","lineWidth","width"],"sources":["C:/Users/dioma/Downloads/react-playground-project/node_modules/chartjs-plugin-trendline/src/core/plugin.js"],"sourcesContent":["import { addFitter } from '../components/trendline';\nimport { getScales } from '../utils/drawing';\n\nexport const pluginTrendlineLinear = {\n    id: 'chartjs-plugin-trendline',\n\n    afterDatasetsDraw: (chartInstance) => {\n        const ctx = chartInstance.ctx;\n        const { xScale, yScale } = getScales(chartInstance);\n\n        const sortedDatasets = chartInstance.data.datasets\n            .map((dataset, index) => ({ dataset, index }))\n            .filter((entry) => entry.dataset.trendlineLinear)\n            .sort((a, b) => {\n                const orderA = a.dataset.order ?? 0;\n                const orderB = b.dataset.order ?? 0;\n\n                // Push 0-order datasets to the end (they draw last / on top)\n                if (orderA === 0 && orderB !== 0) return 1;\n                if (orderB === 0 && orderA !== 0) return -1;\n\n                // Otherwise, draw lower order first\n                return orderA - orderB;\n            });\n\n        sortedDatasets.forEach(({ dataset, index }) => {\n            const showTrendline =\n                dataset.alwaysShowTrendline ||\n                chartInstance.isDatasetVisible(index);\n\n            if (showTrendline && dataset.data.length > 1) {\n                const datasetMeta = chartInstance.getDatasetMeta(index);\n                addFitter(datasetMeta, ctx, dataset, xScale, yScale);\n            }\n        });\n\n        // Reset to solid line after drawing trendline\n        ctx.setLineDash([]);\n    },\n\n    beforeInit: (chartInstance) => {\n        const datasets = chartInstance.data.datasets;\n\n        datasets.forEach((dataset) => {\n            if (dataset.trendlineLinear && dataset.trendlineLinear.label) {\n                const label = dataset.trendlineLinear.label;\n\n                // Access chartInstance to update legend labels\n                const originalGenerateLabels =\n                    chartInstance.legend.options.labels.generateLabels;\n\n                chartInstance.legend.options.labels.generateLabels = function (\n                    chart\n                ) {\n                    const defaultLabels = originalGenerateLabels(chart);\n\n                    const legendConfig = dataset.trendlineLinear.legend;\n\n                    // Display the legend is it's populated and not set to hidden\n                    if (legendConfig && legendConfig.display !== false) {\n                        defaultLabels.push({\n                            text: legendConfig.text || label + ' (Trendline)',\n                            strokeStyle:\n                                legendConfig.color ||\n                                dataset.borderColor ||\n                                'rgba(169,169,169, .6)',\n                            fillStyle: legendConfig.fillStyle || 'transparent',\n                            lineCap: legendConfig.lineCap || 'butt',\n                            lineDash: legendConfig.lineDash || [],\n                            lineWidth: legendConfig.width || 1,\n                        });\n                    }\n                    return defaultLabels;\n                };\n            }\n        });\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}