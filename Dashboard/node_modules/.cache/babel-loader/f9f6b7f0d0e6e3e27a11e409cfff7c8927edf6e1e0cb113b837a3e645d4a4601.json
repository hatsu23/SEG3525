{"ast":null,"code":"/**\n * A class that fits a line to a series of points using least squares.\n */\nexport class LineFitter {\n  constructor() {\n    this.count = 0;\n    this.sumx = 0;\n    this.sumy = 0;\n    this.sumx2 = 0;\n    this.sumxy = 0;\n    this.minx = Number.MAX_VALUE;\n    this.maxx = Number.MIN_VALUE;\n  }\n\n  /**\n   * Adds a point to the line fitter.\n   * @param {number} x - The x-coordinate of the point.\n   * @param {number} y - The y-coordinate of the point.\n   */\n  add(x, y) {\n    this.sumx += x;\n    this.sumy += y;\n    this.sumx2 += x * x;\n    this.sumxy += x * y;\n    if (x < this.minx) this.minx = x;\n    if (x > this.maxx) this.maxx = x;\n    this.count++;\n  }\n\n  /**\n   * Calculates the slope of the fitted line.\n   * @returns {number} - The slope of the line.\n   */\n  slope() {\n    const denominator = this.count * this.sumx2 - this.sumx * this.sumx;\n    return (this.count * this.sumxy - this.sumx * this.sumy) / denominator;\n  }\n\n  /**\n   * Calculates the y-intercept of the fitted line.\n   * @returns {number} - The y-intercept of the line.\n   */\n  intercept() {\n    return (this.sumy - this.slope() * this.sumx) / this.count;\n  }\n\n  /**\n   * Returns the fitted value (y) for a given x.\n   * @param {number} x - The x-coordinate.\n   * @returns {number} - The corresponding y-coordinate on the fitted line.\n   */\n  f(x) {\n    return this.slope() * x + this.intercept();\n  }\n\n  /**\n   * Calculates the projection of the line for the future value.\n   * @returns {number} - The future value based on the fitted line.\n   */\n  fo() {\n    return -this.intercept() / this.slope();\n  }\n\n  /**\n   * Returns the scale (variance) of the fitted line.\n   * @returns {number} - The scale of the fitted line.\n   */\n  scale() {\n    return this.slope();\n  }\n}","map":{"version":3,"names":["LineFitter","constructor","count","sumx","sumy","sumx2","sumxy","minx","Number","MAX_VALUE","maxx","MIN_VALUE","add","x","y","slope","denominator","intercept","f","fo","scale"],"sources":["C:/Users/dioma/Downloads/react-playground-project/node_modules/chartjs-plugin-trendline/src/utils/lineFitter.js"],"sourcesContent":["/**\n * A class that fits a line to a series of points using least squares.\n */\nexport class LineFitter {\n    constructor() {\n        this.count = 0;\n        this.sumx = 0;\n        this.sumy = 0;\n        this.sumx2 = 0;\n        this.sumxy = 0;\n        this.minx = Number.MAX_VALUE;\n        this.maxx = Number.MIN_VALUE;\n    }\n\n    /**\n     * Adds a point to the line fitter.\n     * @param {number} x - The x-coordinate of the point.\n     * @param {number} y - The y-coordinate of the point.\n     */\n    add(x, y) {\n        this.sumx += x;\n        this.sumy += y;\n        this.sumx2 += x * x;\n        this.sumxy += x * y;\n        if (x < this.minx) this.minx = x;\n        if (x > this.maxx) this.maxx = x;\n        this.count++;\n    }\n\n    /**\n     * Calculates the slope of the fitted line.\n     * @returns {number} - The slope of the line.\n     */\n    slope() {\n        const denominator = this.count * this.sumx2 - this.sumx * this.sumx;\n        return (this.count * this.sumxy - this.sumx * this.sumy) / denominator;\n    }\n\n    /**\n     * Calculates the y-intercept of the fitted line.\n     * @returns {number} - The y-intercept of the line.\n     */\n    intercept() {\n        return (this.sumy - this.slope() * this.sumx) / this.count;\n    }\n\n    /**\n     * Returns the fitted value (y) for a given x.\n     * @param {number} x - The x-coordinate.\n     * @returns {number} - The corresponding y-coordinate on the fitted line.\n     */\n    f(x) {\n        return this.slope() * x + this.intercept();\n    }\n\n    /**\n     * Calculates the projection of the line for the future value.\n     * @returns {number} - The future value based on the fitted line.\n     */\n    fo() {\n        return -this.intercept() / this.slope();\n    }\n\n    /**\n     * Returns the scale (variance) of the fitted line.\n     * @returns {number} - The scale of the fitted line.\n     */\n    scale() {\n        return this.slope();\n    }\n} "],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,CAAC;EACpBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,IAAI,GAAGC,MAAM,CAACC,SAAS;IAC5B,IAAI,CAACC,IAAI,GAAGF,MAAM,CAACG,SAAS;EAChC;;EAEA;AACJ;AACA;AACA;AACA;EACIC,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACN,IAAI,CAACX,IAAI,IAAIU,CAAC;IACd,IAAI,CAACT,IAAI,IAAIU,CAAC;IACd,IAAI,CAACT,KAAK,IAAIQ,CAAC,GAAGA,CAAC;IACnB,IAAI,CAACP,KAAK,IAAIO,CAAC,GAAGC,CAAC;IACnB,IAAID,CAAC,GAAG,IAAI,CAACN,IAAI,EAAE,IAAI,CAACA,IAAI,GAAGM,CAAC;IAChC,IAAIA,CAAC,GAAG,IAAI,CAACH,IAAI,EAAE,IAAI,CAACA,IAAI,GAAGG,CAAC;IAChC,IAAI,CAACX,KAAK,EAAE;EAChB;;EAEA;AACJ;AACA;AACA;EACIa,KAAKA,CAAA,EAAG;IACJ,MAAMC,WAAW,GAAG,IAAI,CAACd,KAAK,GAAG,IAAI,CAACG,KAAK,GAAG,IAAI,CAACF,IAAI,GAAG,IAAI,CAACA,IAAI;IACnE,OAAO,CAAC,IAAI,CAACD,KAAK,GAAG,IAAI,CAACI,KAAK,GAAG,IAAI,CAACH,IAAI,GAAG,IAAI,CAACC,IAAI,IAAIY,WAAW;EAC1E;;EAEA;AACJ;AACA;AACA;EACIC,SAASA,CAAA,EAAG;IACR,OAAO,CAAC,IAAI,CAACb,IAAI,GAAG,IAAI,CAACW,KAAK,CAAC,CAAC,GAAG,IAAI,CAACZ,IAAI,IAAI,IAAI,CAACD,KAAK;EAC9D;;EAEA;AACJ;AACA;AACA;AACA;EACIgB,CAACA,CAACL,CAAC,EAAE;IACD,OAAO,IAAI,CAACE,KAAK,CAAC,CAAC,GAAGF,CAAC,GAAG,IAAI,CAACI,SAAS,CAAC,CAAC;EAC9C;;EAEA;AACJ;AACA;AACA;EACIE,EAAEA,CAAA,EAAG;IACD,OAAO,CAAC,IAAI,CAACF,SAAS,CAAC,CAAC,GAAG,IAAI,CAACF,KAAK,CAAC,CAAC;EAC3C;;EAEA;AACJ;AACA;AACA;EACIK,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACL,KAAK,CAAC,CAAC;EACvB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}