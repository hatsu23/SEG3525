{"ast":null,"code":"/**\n * Retrieves the x and y scales from the chart instance.\n * @param {Chart} chartInstance - The chart instance.\n * @returns {Object} - The xScale and yScale of the chart.\n */\nexport const getScales = chartInstance => {\n  let xScale, yScale;\n  for (const scale of Object.values(chartInstance.scales)) {\n    if (scale.isHorizontal()) xScale = scale;else yScale = scale;\n    if (xScale && yScale) break;\n  }\n  return {\n    xScale,\n    yScale\n  };\n};\n\n/**\n * Sets the line style (dashed, dotted, solid) for the canvas context.\n * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\n * @param {string} lineStyle - The style of the line ('dotted', 'dashed', 'solid', etc.).\n */\nexport const setLineStyle = (ctx, lineStyle) => {\n  switch (lineStyle) {\n    case 'dotted':\n      ctx.setLineDash([2, 2]);\n      break;\n    case 'dashed':\n      ctx.setLineDash([8, 3]);\n      break;\n    case 'dashdot':\n      ctx.setLineDash([8, 3, 2, 3]);\n      break;\n    case 'solid':\n    default:\n      ctx.setLineDash([]);\n      break;\n  }\n};\n\n/**\n * Draws the trendline on the canvas context.\n * @param {Object} params - The trendline parameters.\n * @param {CanvasRenderingContext2D} params.ctx - The canvas rendering context.\n * @param {number} params.x1 - Starting x-coordinate of the trendline.\n * @param {number} params.y1 - Starting y-coordinate of the trendline.\n * @param {number} params.x2 - Ending x-coordinate of the trendline.\n * @param {number} params.y2 - Ending y-coordinate of the trendline.\n * @param {string} params.colorMin - The starting color of the trendline gradient.\n * @param {string} params.colorMax - The ending color of the trendline gradient.\n */\nexport const drawTrendline = _ref => {\n  let {\n    ctx,\n    x1,\n    y1,\n    x2,\n    y2,\n    colorMin,\n    colorMax\n  } = _ref;\n  // Ensure all values are finite numbers\n  if (!isFinite(x1) || !isFinite(y1) || !isFinite(x2) || !isFinite(y2)) {\n    console.warn('Cannot draw trendline: coordinates contain non-finite values', {\n      x1,\n      y1,\n      x2,\n      y2\n    });\n    return;\n  }\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  try {\n    let gradient = ctx.createLinearGradient(x1, y1, x2, y2);\n    gradient.addColorStop(0, colorMin);\n    gradient.addColorStop(1, colorMax);\n    ctx.strokeStyle = gradient;\n  } catch (e) {\n    // Fallback to solid color if gradient creation fails\n    console.warn('Gradient creation failed, using solid color:', e);\n    ctx.strokeStyle = colorMin;\n  }\n  ctx.stroke();\n  ctx.closePath();\n};\n\n/**\n * Fills the area below the trendline with the specified color.\n * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\n * @param {number} x1 - Starting x-coordinate of the trendline.\n * @param {number} y1 - Starting y-coordinate of the trendline.\n * @param {number} x2 - Ending x-coordinate of the trendline.\n * @param {number} y2 - Ending y-coordinate of the trendline.\n * @param {number} drawBottom - The bottom boundary of the chart.\n * @param {string} fillColor - The color to fill below the trendline.\n */\nexport const fillBelowTrendline = (ctx, x1, y1, x2, y2, drawBottom, fillColor) => {\n  // Ensure all values are finite numbers\n  if (!isFinite(x1) || !isFinite(y1) || !isFinite(x2) || !isFinite(y2) || !isFinite(drawBottom)) {\n    console.warn('Cannot fill below trendline: coordinates contain non-finite values', {\n      x1,\n      y1,\n      x2,\n      y2,\n      drawBottom\n    });\n    return;\n  }\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x2, drawBottom);\n  ctx.lineTo(x1, drawBottom);\n  ctx.lineTo(x1, y1);\n  ctx.closePath();\n  ctx.fillStyle = fillColor;\n  ctx.fill();\n};","map":{"version":3,"names":["getScales","chartInstance","xScale","yScale","scale","Object","values","scales","isHorizontal","setLineStyle","ctx","lineStyle","setLineDash","drawTrendline","_ref","x1","y1","x2","y2","colorMin","colorMax","isFinite","console","warn","beginPath","moveTo","lineTo","gradient","createLinearGradient","addColorStop","strokeStyle","e","stroke","closePath","fillBelowTrendline","drawBottom","fillColor","fillStyle","fill"],"sources":["C:/Users/dioma/Downloads/react-playground-project/node_modules/chartjs-plugin-trendline/src/utils/drawing.js"],"sourcesContent":["/**\n * Retrieves the x and y scales from the chart instance.\n * @param {Chart} chartInstance - The chart instance.\n * @returns {Object} - The xScale and yScale of the chart.\n */\nexport const getScales = (chartInstance) => {\n    let xScale, yScale;\n    for (const scale of Object.values(chartInstance.scales)) {\n        if (scale.isHorizontal()) xScale = scale;\n        else yScale = scale;\n        if (xScale && yScale) break;\n    }\n    return { xScale, yScale };\n};\n\n/**\n * Sets the line style (dashed, dotted, solid) for the canvas context.\n * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\n * @param {string} lineStyle - The style of the line ('dotted', 'dashed', 'solid', etc.).\n */\nexport const setLineStyle = (ctx, lineStyle) => {\n    switch (lineStyle) {\n        case 'dotted':\n            ctx.setLineDash([2, 2]);\n            break;\n        case 'dashed':\n            ctx.setLineDash([8, 3]);\n            break;\n        case 'dashdot':\n            ctx.setLineDash([8, 3, 2, 3]);\n            break;\n        case 'solid':\n        default:\n            ctx.setLineDash([]);\n            break;\n    }\n};\n\n/**\n * Draws the trendline on the canvas context.\n * @param {Object} params - The trendline parameters.\n * @param {CanvasRenderingContext2D} params.ctx - The canvas rendering context.\n * @param {number} params.x1 - Starting x-coordinate of the trendline.\n * @param {number} params.y1 - Starting y-coordinate of the trendline.\n * @param {number} params.x2 - Ending x-coordinate of the trendline.\n * @param {number} params.y2 - Ending y-coordinate of the trendline.\n * @param {string} params.colorMin - The starting color of the trendline gradient.\n * @param {string} params.colorMax - The ending color of the trendline gradient.\n */\nexport const drawTrendline = ({ ctx, x1, y1, x2, y2, colorMin, colorMax }) => {\n    // Ensure all values are finite numbers\n    if (!isFinite(x1) || !isFinite(y1) || !isFinite(x2) || !isFinite(y2)) {\n        console.warn(\n            'Cannot draw trendline: coordinates contain non-finite values',\n            { x1, y1, x2, y2 }\n        );\n        return;\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n\n    try {\n        let gradient = ctx.createLinearGradient(x1, y1, x2, y2);\n        gradient.addColorStop(0, colorMin);\n        gradient.addColorStop(1, colorMax);\n        ctx.strokeStyle = gradient;\n    } catch (e) {\n        // Fallback to solid color if gradient creation fails\n        console.warn('Gradient creation failed, using solid color:', e);\n        ctx.strokeStyle = colorMin;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n};\n\n/**\n * Fills the area below the trendline with the specified color.\n * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\n * @param {number} x1 - Starting x-coordinate of the trendline.\n * @param {number} y1 - Starting y-coordinate of the trendline.\n * @param {number} x2 - Ending x-coordinate of the trendline.\n * @param {number} y2 - Ending y-coordinate of the trendline.\n * @param {number} drawBottom - The bottom boundary of the chart.\n * @param {string} fillColor - The color to fill below the trendline.\n */\nexport const fillBelowTrendline = (ctx, x1, y1, x2, y2, drawBottom, fillColor) => {\n    // Ensure all values are finite numbers\n    if (\n        !isFinite(x1) ||\n        !isFinite(y1) ||\n        !isFinite(x2) ||\n        !isFinite(y2) ||\n        !isFinite(drawBottom)\n    ) {\n        console.warn(\n            'Cannot fill below trendline: coordinates contain non-finite values',\n            { x1, y1, x2, y2, drawBottom }\n        );\n        return;\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x2, drawBottom);\n    ctx.lineTo(x1, drawBottom);\n    ctx.lineTo(x1, y1);\n    ctx.closePath();\n\n    ctx.fillStyle = fillColor;\n    ctx.fill();\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}